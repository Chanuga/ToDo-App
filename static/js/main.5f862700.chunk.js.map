{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","inputText","setInputText","todo","isInProgress","arrayOfToDos","setArrayOfToDos","itemsInToDosArray","map","toDos","index","key","className","onClick","changeState","danger","deleteFromArray","indexGoingToChange","copyOfToDos","splice","size","placeholder","value","onChange","event","target","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAyDeA,EAtDO,WAAO,IAAD,EAEQC,mBAAS,IAFjB,mBAEnBC,EAFmB,KAERC,EAFQ,OAGcF,mBAAS,CAAC,CAACG,KAAK,uBAAwBC,cAAa,GAAQ,CAACD,KAAK,YAAaC,cAAa,GAAO,CAACD,KAAK,YAAaC,cAAa,GAAO,CAACD,KAAK,cAAeC,cAAa,KAH3L,mBAGnBC,EAHmB,KAGLC,EAHK,KAKpBC,EAAoBF,EAAaG,KAAI,SAACC,EAAOC,GAAR,OACzC,wBAAIC,IAAKD,EAAOE,UAAU,iBACvBH,EAAMN,KACLM,EAAML,aAAiE,uBAAGQ,UAAU,qBAAb,aAAlD,uBAAGA,UAAU,uBAAb,YACvB,6BACE,kBAAC,IAAD,CAAQA,UAAU,QAAQC,QAAS,kBAAMC,EAAYJ,KAASD,EAAML,aAAe,mBAAqB,qBACxG,kBAAC,IAAD,CAAQW,QAAM,EAACF,QAAS,kBAAMG,EAAgBN,KAA9C,cAUAI,EAAc,SAACJ,GACnB,IAAMO,EAAkB,YAAOZ,GAC/BY,EAAmBP,GAAON,aAAea,EAAmBP,GAAON,cAAa,EAAQa,EAAmBP,GAAON,cAAa,EAC/HE,EAAgBW,IAGZD,EAAkB,SAACN,GACvB,IAAMQ,EAAW,YAAOb,GACxBa,EAAYC,OAAOT,EAAO,GAC1BJ,EAAgBY,IAGlB,OACE,yBAAKN,UAAU,qBACb,uBAAGA,UAAU,mEAAb,qBAEA,kBAAC,IAAD,MAEA,yBAAKA,UAAU,kEACb,kBAAC,IAAD,CAAOQ,KAAK,QAAQC,YAAY,oBAAoBC,MAAOrB,EAAWsB,SAAU,SAAAC,GAAK,OAAItB,EAAasB,EAAMC,OAAOH,UACnH,kBAAC,IAAD,CAAQI,KAAK,UAAUN,KAAK,QAAQP,QA1BtB,WAClB,IAAMK,EAAW,sBAAOb,GAAP,CAAqB,CAACF,KAAKF,EAAWG,cAAa,KACpEE,EAAgBY,GAChBhB,EAAa,MAuBT,gBAGF,kBAAC,IAAD,MAEA,wBAAIU,UAAU,yBACXL,KCtCWoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5f862700.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport { Button , Divider, Input  } from 'antd';\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const [inputText, setInputText] = useState('')\r\n  const [arrayOfToDos, setArrayOfToDos] = useState([{todo:\"Requrement Gathering\", isInProgress:false}, {todo:\"Analysing\", isInProgress:true}, {todo:\"Designing\", isInProgress:true}, {todo:\"Development\", isInProgress:false} ]);\r\n\r\n  const itemsInToDosArray = arrayOfToDos.map((toDos, index) => (\r\n    <li key={index} className=\"flex flex-row\">\r\n      {toDos.todo}\r\n      {!toDos.isInProgress ? <p className=\"text-green-500 ml-8\">Job Done</p> : <p className=\"text-red-500 ml-8\">Procesing</p>}\r\n      <br/>\r\n        <Button className=\"ml-20\" onClick={() => changeState(index)}>{toDos.isInProgress ? \"Mark as Job Done\" : \"Mark as Procesing\"}</Button>\r\n        <Button danger onClick={() => deleteFromArray(index)}>Delete</Button>\r\n    </li>\r\n  ))\r\n\r\n  const addToDoList = () => {\r\n    const copyOfToDos = [...arrayOfToDos, {todo:inputText, isInProgress:true}];\r\n    setArrayOfToDos(copyOfToDos);\r\n    setInputText(\"\");\r\n  }\r\n\r\n  const changeState = (index:any) => {\r\n    const indexGoingToChange = [...arrayOfToDos];\r\n    indexGoingToChange[index].isInProgress ? indexGoingToChange[index].isInProgress=false : indexGoingToChange[index].isInProgress=true\r\n    setArrayOfToDos(indexGoingToChange);\r\n  }\r\n\r\n  const deleteFromArray = (index:any) => {\r\n    const copyOfToDos = [...arrayOfToDos];\r\n    copyOfToDos.splice(index, 1);\r\n    setArrayOfToDos(copyOfToDos);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto\">\r\n      <p className=\"flex flex-col md:flex-row justify-center m-5 text-3xl font-bold\">To-Do Application</p>\r\n\r\n      <Divider />\r\n\r\n      <div className=\"flex flex-col md:flex-row justify-center m-5 text-lg font-bold\">\r\n        <Input size=\"small\" placeholder=\"Add to To-Do List\" value={inputText} onChange={event => setInputText(event.target.value)}/>\r\n        <Button type=\"primary\" size='large' onClick={addToDoList}>Add to List</Button>\r\n      </div>\r\n\r\n      <Divider />\r\n\r\n      <ol className=\"m-5 text-lg font-bold\">\r\n        {itemsInToDosArray}\r\n      </ol>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}